To Hosting a basic server from the ESP32 to control various digital based
actuators (led, buzzer, relay) from a simple web page.



: Turn on Turn off D0, D4, D8 pins from a simple web page

Code:



#include <ESP8266WiFi.h>
#define gpio16LEDPin 16 /* One LED connected to GPIO4 - D0 */
#define gpio2LEDPin 2 /* One LED connected to GPIO5 - D4 */
#define gpio15LEDPin 15 /* One LED connected to GPIO5 - D8 */
const char* ssid = "happyfy"; /* Add your router's SSID */
const char* password = "asdfghjkl"; /*Add the password */
int gpio16Value;
int gpio2Value;
int gpio15Value;
WiFiServer espServer(80); /* Instance of WiFiServer with port number 80 */
/* 80 is the Port Number for HTTP Web Server */
void setup()
{

 Serial.begin(115200); /* Begin Serial Communication with 115200 Baud Rate
*/
 /* Configure GPIO4 and GPIO5 Pins as OUTPUTs */
 pinMode(gpio16LEDPin, OUTPUT);
 pinMode(gpio2LEDPin, OUTPUT);
 pinMode(gpio15LEDPin, OUTPUT);
 /* Set the initial values of GPIO4 and GPIO5 as LOW*/
 /* Both the LEDs are initially OFF */
 digitalWrite(gpio16LEDPin, LOW);
 digitalWrite(gpio2LEDPin, LOW);
 digitalWrite(gpio15LEDPin, LOW);

 Serial.print("\n");
 Serial.print("Connecting to: ");
 Serial.println(ssid);
 WiFi.mode(WIFI_STA); /* Configure ESP8266 in STA Mode */
 WiFi.begin(ssid, password); /* Connect to Wi-Fi based on above SSID and
Password */
 while(WiFi.status() != WL_CONNECTED)
 {
 Serial.print("*");
 delay(500);
 }
 Serial.print("\n");
 Serial.print("Connected to Wi-Fi: ");
 Serial.println(WiFi.SSID());
 delay(100);
 Serial.print("\n");
 Serial.println("Starting ESP8266 Web Server...");
 espServer.begin(); /* Start the HTTP web Server */
 Serial.println("ESP8266 Web Server Started");
 Serial.print("\n");
 Serial.print("The URL of ESP8266 Web Server is: ");
 Serial.print("http://");
 Serial.println(WiFi.localIP());
 Serial.print("\n");
 Serial.println("Use the above URL in your Browser to access ESP8266 Web
Server\n");
}
void loop()
{
 WiFiClient client = espServer.available(); /* Check if a client is
available */
 if(!client)
 {
 return;
 }
 Serial.println("New Client!!!");
 String request = client.readStringUntil('\r'); /* Read the first line of
the request from client */
 Serial.println(request); /* Print the request on the Serial monitor */ 
 /* The request is in the form of HTTP GET Method */
 client.flush();
 /* Extract the URL of the request */
 /* We have four URLs. If IP Address is 192.168.1.6 (for example),
 * then URLs are:
 * 192.168.1.6/GPIO4ON and its request is GET /GPIO4ON HTTP/1.1
 * 192.168.1.6/GPIO4OFF and its request is GET /GPIO4OFF HTTP/1.1
 * 192.168.1.6/GPIO5ON and its request is GET /GPIO5ON HTTP/1.1
 * 192.168.1.6/GPIO4OFF and its request is GET /GPIO5OFF HTTP/1.1
 */
 /* Based on the URL from the request, turn the LEDs ON or OFF */
 if (request.indexOf("/GPIO16ON") != -1)
 {
 Serial.println("GPIO16 LED is ON");
 digitalWrite(gpio16LEDPin, HIGH);
 gpio16Value = HIGH;
 }
 if (request.indexOf("/GPIO16OFF") != -1)
 {
 Serial.println("GPIO16 LED is OFF");
 digitalWrite(gpio16LEDPin, LOW);
 gpio16Value = LOW;
 }
 if (request.indexOf("/GPIO2ON") != -1)
 {
 Serial.println("GPIO2 LED is ON");
 digitalWrite(gpio2LEDPin, HIGH);
 gpio2Value = HIGH;
 }
 if (request.indexOf("/GPIO2OFF") != -1)
 {
 Serial.println("GPIO2 LED is OFF");
 digitalWrite(gpio2LEDPin, LOW);
 gpio2Value = LOW;
 }
 if (request.indexOf("/GPIO15ON") != -1)
 {
 Serial.println("GPIO15 LED is ON");
 digitalWrite(gpio15LEDPin, HIGH);
 gpio15Value = HIGH;
 }
 if (request.indexOf("/GPIO15OFF") != -1)
 {
 Serial.println("GPIO15 LED is OFF");
 digitalWrite(gpio15LEDPin, LOW);
 gpio15Value = LOW;
 }
 /* HTTP Response in the form of HTML Web Page */
 client.println("HTTP/1.1 200 OK"); 
 client.println("Content-Type: text/html");
 client.println(); // IMPORTANT
 client.println("<!DOCTYPE HTML>");
 client.println("<html>");
 client.println("<head>");
 client.println("<meta name=\"viewport\" content=\"width=device-width,
initial-scale=1\">");
 client.println("<link rel=\"icon\" href=\"data:,\">");
 /* CSS Styling for Buttons and Web Page */
 client.println("<style>");
 client.println("html { font-family: Courier New; display: inline-block;
margin: 0px auto; text-align: center;}");
 client.println(".button {border: none; color: white; padding: 10px 20px;
text-align: center;");
 client.println("text-decoration: none; font-size: 25px; margin: 2px;
cursor: pointer;}");
 client.println(".button1 {background-color: #13B3F0;}");
 client.println(".button2 {background-color: #3342FF;}");
 client.println("</style>");
 client.println("</head>");

 /* The main body of the Web Page */
 client.println("<body>");
 client.println("<h2>ESP8266 Web Server</h2>");

 if(gpio16Value == LOW)
 {
 client.println("<p>GPIO16 LED Status: OFF</p>");
 client.print("<p><a href=\"/GPIO16ON\"><button class=\"button
button1\">Click to turn ON</button></a></p>");
 }
 else
 {
 client.println("<p>GPIO16 LED Status: ON</p>");
 client.print("<p><a href=\"/GPIO16OFF\"><button class=\"button
button2\">Click to turn OFF</button></a></p>");
 } if(gpio2Value == LOW)
 {
 client.println("<p>GPIO2 LED Status: OFF</p>");
 client.print("<p><a href=\"/GPIO2ON\"><button class=\"button
button1\">Click to turn ON</button></a></p>");
 }
 else
 {
 client.println("<p>GPIO2 LED Status: ON</p>");
 client.print("<p><a href=\"/GPIO2OFF\"><button class=\"button
button2\">Click to turn OFF</button></a></p>");
 }
 if(gpio15Value == LOW)
 {
 client.println("<p>GPIO15 LED Status: OFF</p>");

 client.print("<p><a href=\"/GPIO15ON\"><button class=\"button
button1\">Click to turn ON</button></a></p>");
 }
 else
 {
 client.println("<p>GPIO15 LED Status: ON</p>");
 client.print("<p><a href=\"/GPIO15OFF\"><button class=\"button
button2\">Click to turn OFF</button></a></p>");
 }
 client.println("</body>");
 client.println("</html>");
 client.print("\n");

 delay(1);
 /* Close the connection */
 client.stop();
 Serial.println("Client disconnected");
 Serial.print("\n");


